// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arithmetic.proto

#ifndef PROTOBUF_arithmetic_2eproto__INCLUDED
#define PROTOBUF_arithmetic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rpc {
namespace arith {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_arithmetic_2eproto();
void protobuf_AssignDesc_arithmetic_2eproto();
void protobuf_ShutdownFile_arithmetic_2eproto();

class ArithRequest;
class ArithResponse;

enum ArithType {
  Addition = 1,
  Subtraction = 2,
  Multiplication = 3,
  Division = 4
};
bool ArithType_IsValid(int value);
const ArithType ArithType_MIN = Addition;
const ArithType ArithType_MAX = Division;
const int ArithType_ARRAYSIZE = ArithType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ArithType_descriptor();
inline const ::std::string& ArithType_Name(ArithType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ArithType_descriptor(), value);
}
inline bool ArithType_Parse(
    const ::std::string& name, ArithType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ArithType>(
    ArithType_descriptor(), name, value);
}
// ===================================================================

class ArithRequest : public ::google::protobuf::Message {
 public:
  ArithRequest();
  virtual ~ArithRequest();

  ArithRequest(const ArithRequest& from);

  inline ArithRequest& operator=(const ArithRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArithRequest& default_instance();

  void Swap(ArithRequest* other);

  // implements Message ----------------------------------------------

  ArithRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArithRequest& from);
  void MergeFrom(const ArithRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .rpc.arith.ArithType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::rpc::arith::ArithType type() const;
  inline void set_type(::rpc::arith::ArithType value);

  // optional uint64 op1 = 2;
  inline bool has_op1() const;
  inline void clear_op1();
  static const int kOp1FieldNumber = 2;
  inline ::google::protobuf::uint64 op1() const;
  inline void set_op1(::google::protobuf::uint64 value);

  // optional uint64 op2 = 3;
  inline bool has_op2() const;
  inline void clear_op2();
  static const int kOp2FieldNumber = 3;
  inline ::google::protobuf::uint64 op2() const;
  inline void set_op2(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:rpc.arith.ArithRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_op1();
  inline void clear_has_op1();
  inline void set_has_op2();
  inline void clear_has_op2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 op1_;
  ::google::protobuf::uint64 op2_;
  int type_;
  friend void  protobuf_AddDesc_arithmetic_2eproto();
  friend void protobuf_AssignDesc_arithmetic_2eproto();
  friend void protobuf_ShutdownFile_arithmetic_2eproto();

  void InitAsDefaultInstance();
  static ArithRequest* default_instance_;
};
// -------------------------------------------------------------------

class ArithResponse : public ::google::protobuf::Message {
 public:
  ArithResponse();
  virtual ~ArithResponse();

  ArithResponse(const ArithResponse& from);

  inline ArithResponse& operator=(const ArithResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArithResponse& default_instance();

  void Swap(ArithResponse* other);

  // implements Message ----------------------------------------------

  ArithResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArithResponse& from);
  void MergeFrom(const ArithResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 res = 1;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 1;
  inline ::google::protobuf::uint64 res() const;
  inline void set_res(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:rpc.arith.ArithResponse)
 private:
  inline void set_has_res();
  inline void clear_has_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 res_;
  friend void  protobuf_AddDesc_arithmetic_2eproto();
  friend void protobuf_AssignDesc_arithmetic_2eproto();
  friend void protobuf_ShutdownFile_arithmetic_2eproto();

  void InitAsDefaultInstance();
  static ArithResponse* default_instance_;
};
// ===================================================================

class ArithService_Stub;

class ArithService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ArithService() {};
 public:
  virtual ~ArithService();

  typedef ArithService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void compute(::google::protobuf::RpcController* controller,
                       const ::rpc::arith::ArithRequest* request,
                       ::rpc::arith::ArithResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ArithService);
};

class ArithService_Stub : public ArithService {
 public:
  ArithService_Stub(::google::protobuf::RpcChannel* channel);
  ArithService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ArithService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ArithService ------------------------------------------

  void compute(::google::protobuf::RpcController* controller,
                       const ::rpc::arith::ArithRequest* request,
                       ::rpc::arith::ArithResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ArithService_Stub);
};


// ===================================================================


// ===================================================================

// ArithRequest

// required .rpc.arith.ArithType type = 1;
inline bool ArithRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArithRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArithRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArithRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::rpc::arith::ArithType ArithRequest::type() const {
  // @@protoc_insertion_point(field_get:rpc.arith.ArithRequest.type)
  return static_cast< ::rpc::arith::ArithType >(type_);
}
inline void ArithRequest::set_type(::rpc::arith::ArithType value) {
  assert(::rpc::arith::ArithType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:rpc.arith.ArithRequest.type)
}

// optional uint64 op1 = 2;
inline bool ArithRequest::has_op1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArithRequest::set_has_op1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArithRequest::clear_has_op1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArithRequest::clear_op1() {
  op1_ = GOOGLE_ULONGLONG(0);
  clear_has_op1();
}
inline ::google::protobuf::uint64 ArithRequest::op1() const {
  // @@protoc_insertion_point(field_get:rpc.arith.ArithRequest.op1)
  return op1_;
}
inline void ArithRequest::set_op1(::google::protobuf::uint64 value) {
  set_has_op1();
  op1_ = value;
  // @@protoc_insertion_point(field_set:rpc.arith.ArithRequest.op1)
}

// optional uint64 op2 = 3;
inline bool ArithRequest::has_op2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArithRequest::set_has_op2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArithRequest::clear_has_op2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArithRequest::clear_op2() {
  op2_ = GOOGLE_ULONGLONG(0);
  clear_has_op2();
}
inline ::google::protobuf::uint64 ArithRequest::op2() const {
  // @@protoc_insertion_point(field_get:rpc.arith.ArithRequest.op2)
  return op2_;
}
inline void ArithRequest::set_op2(::google::protobuf::uint64 value) {
  set_has_op2();
  op2_ = value;
  // @@protoc_insertion_point(field_set:rpc.arith.ArithRequest.op2)
}

// -------------------------------------------------------------------

// ArithResponse

// optional uint64 res = 1;
inline bool ArithResponse::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArithResponse::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArithResponse::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArithResponse::clear_res() {
  res_ = GOOGLE_ULONGLONG(0);
  clear_has_res();
}
inline ::google::protobuf::uint64 ArithResponse::res() const {
  // @@protoc_insertion_point(field_get:rpc.arith.ArithResponse.res)
  return res_;
}
inline void ArithResponse::set_res(::google::protobuf::uint64 value) {
  set_has_res();
  res_ = value;
  // @@protoc_insertion_point(field_set:rpc.arith.ArithResponse.res)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace arith
}  // namespace rpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rpc::arith::ArithType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::arith::ArithType>() {
  return ::rpc::arith::ArithType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_arithmetic_2eproto__INCLUDED
