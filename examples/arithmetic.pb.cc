// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arithmetic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "arithmetic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc {
namespace arith {

namespace {

const ::google::protobuf::Descriptor* ArithRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArithRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArithResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArithResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ArithType_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* ArithService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_arithmetic_2eproto() {
  protobuf_AddDesc_arithmetic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "arithmetic.proto");
  GOOGLE_CHECK(file != NULL);
  ArithRequest_descriptor_ = file->message_type(0);
  static const int ArithRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArithRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArithRequest, op1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArithRequest, op2_),
  };
  ArithRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArithRequest_descriptor_,
      ArithRequest::default_instance_,
      ArithRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArithRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArithRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArithRequest));
  ArithResponse_descriptor_ = file->message_type(1);
  static const int ArithResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArithResponse, res_),
  };
  ArithResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArithResponse_descriptor_,
      ArithResponse::default_instance_,
      ArithResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArithResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArithResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArithResponse));
  ArithType_descriptor_ = file->enum_type(0);
  ArithService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_arithmetic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArithRequest_descriptor_, &ArithRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArithResponse_descriptor_, &ArithResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_arithmetic_2eproto() {
  delete ArithRequest::default_instance_;
  delete ArithRequest_reflection_;
  delete ArithResponse::default_instance_;
  delete ArithResponse_reflection_;
}

void protobuf_AddDesc_arithmetic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020arithmetic.proto\022\trpc.arith\"L\n\014ArithRe"
    "quest\022\"\n\004type\030\001 \002(\0162\024.rpc.arith.ArithTyp"
    "e\022\013\n\003op1\030\002 \001(\004\022\013\n\003op2\030\003 \001(\004\"\034\n\rArithResp"
    "onse\022\013\n\003res\030\001 \001(\004*L\n\tArithType\022\014\n\010Additi"
    "on\020\001\022\017\n\013Subtraction\020\002\022\022\n\016Multiplication\020"
    "\003\022\014\n\010Division\020\0042L\n\014ArithService\022<\n\007compu"
    "te\022\027.rpc.arith.ArithRequest\032\030.rpc.arith."
    "ArithResponseB\003\200\001\001", 298);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "arithmetic.proto", &protobuf_RegisterTypes);
  ArithRequest::default_instance_ = new ArithRequest();
  ArithResponse::default_instance_ = new ArithResponse();
  ArithRequest::default_instance_->InitAsDefaultInstance();
  ArithResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_arithmetic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_arithmetic_2eproto {
  StaticDescriptorInitializer_arithmetic_2eproto() {
    protobuf_AddDesc_arithmetic_2eproto();
  }
} static_descriptor_initializer_arithmetic_2eproto_;
const ::google::protobuf::EnumDescriptor* ArithType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArithType_descriptor_;
}
bool ArithType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ArithRequest::kTypeFieldNumber;
const int ArithRequest::kOp1FieldNumber;
const int ArithRequest::kOp2FieldNumber;
#endif  // !_MSC_VER

ArithRequest::ArithRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.arith.ArithRequest)
}

void ArithRequest::InitAsDefaultInstance() {
}

ArithRequest::ArithRequest(const ArithRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.arith.ArithRequest)
}

void ArithRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  op1_ = GOOGLE_ULONGLONG(0);
  op2_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArithRequest::~ArithRequest() {
  // @@protoc_insertion_point(destructor:rpc.arith.ArithRequest)
  SharedDtor();
}

void ArithRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArithRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArithRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArithRequest_descriptor_;
}

const ArithRequest& ArithRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arithmetic_2eproto();
  return *default_instance_;
}

ArithRequest* ArithRequest::default_instance_ = NULL;

ArithRequest* ArithRequest::New() const {
  return new ArithRequest;
}

void ArithRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ArithRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(op1_, op2_);
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArithRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.arith.ArithRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rpc.arith.ArithType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rpc::arith::ArithType_IsValid(value)) {
            set_type(static_cast< ::rpc::arith::ArithType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_op1;
        break;
      }

      // optional uint64 op1 = 2;
      case 2: {
        if (tag == 16) {
         parse_op1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &op1_)));
          set_has_op1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_op2;
        break;
      }

      // optional uint64 op2 = 3;
      case 3: {
        if (tag == 24) {
         parse_op2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &op2_)));
          set_has_op2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.arith.ArithRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.arith.ArithRequest)
  return false;
#undef DO_
}

void ArithRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.arith.ArithRequest)
  // required .rpc.arith.ArithType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 op1 = 2;
  if (has_op1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->op1(), output);
  }

  // optional uint64 op2 = 3;
  if (has_op2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->op2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.arith.ArithRequest)
}

::google::protobuf::uint8* ArithRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.arith.ArithRequest)
  // required .rpc.arith.ArithType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 op1 = 2;
  if (has_op1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->op1(), target);
  }

  // optional uint64 op2 = 3;
  if (has_op2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->op2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.arith.ArithRequest)
  return target;
}

int ArithRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rpc.arith.ArithType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 op1 = 2;
    if (has_op1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->op1());
    }

    // optional uint64 op2 = 3;
    if (has_op2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->op2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArithRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArithRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArithRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArithRequest::MergeFrom(const ArithRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_op1()) {
      set_op1(from.op1());
    }
    if (from.has_op2()) {
      set_op2(from.op2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArithRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArithRequest::CopyFrom(const ArithRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArithRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ArithRequest::Swap(ArithRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(op1_, other->op1_);
    std::swap(op2_, other->op2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArithRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArithRequest_descriptor_;
  metadata.reflection = ArithRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArithResponse::kResFieldNumber;
#endif  // !_MSC_VER

ArithResponse::ArithResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.arith.ArithResponse)
}

void ArithResponse::InitAsDefaultInstance() {
}

ArithResponse::ArithResponse(const ArithResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.arith.ArithResponse)
}

void ArithResponse::SharedCtor() {
  _cached_size_ = 0;
  res_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArithResponse::~ArithResponse() {
  // @@protoc_insertion_point(destructor:rpc.arith.ArithResponse)
  SharedDtor();
}

void ArithResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArithResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArithResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArithResponse_descriptor_;
}

const ArithResponse& ArithResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arithmetic_2eproto();
  return *default_instance_;
}

ArithResponse* ArithResponse::default_instance_ = NULL;

ArithResponse* ArithResponse::New() const {
  return new ArithResponse;
}

void ArithResponse::Clear() {
  res_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArithResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.arith.ArithResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 res = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.arith.ArithResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.arith.ArithResponse)
  return false;
#undef DO_
}

void ArithResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.arith.ArithResponse)
  // optional uint64 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.arith.ArithResponse)
}

::google::protobuf::uint8* ArithResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.arith.ArithResponse)
  // optional uint64 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.arith.ArithResponse)
  return target;
}

int ArithResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArithResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArithResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArithResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArithResponse::MergeFrom(const ArithResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArithResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArithResponse::CopyFrom(const ArithResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArithResponse::IsInitialized() const {

  return true;
}

void ArithResponse::Swap(ArithResponse* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArithResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArithResponse_descriptor_;
  metadata.reflection = ArithResponse_reflection_;
  return metadata;
}


// ===================================================================

ArithService::~ArithService() {}

const ::google::protobuf::ServiceDescriptor* ArithService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArithService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ArithService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArithService_descriptor_;
}

void ArithService::compute(::google::protobuf::RpcController* controller,
                         const ::rpc::arith::ArithRequest*,
                         ::rpc::arith::ArithResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method compute() not implemented.");
  done->Run();
}

void ArithService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ArithService_descriptor_);
  switch(method->index()) {
    case 0:
      compute(controller,
             ::google::protobuf::down_cast<const ::rpc::arith::ArithRequest*>(request),
             ::google::protobuf::down_cast< ::rpc::arith::ArithResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ArithService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::rpc::arith::ArithRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ArithService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::rpc::arith::ArithResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ArithService_Stub::ArithService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ArithService_Stub::ArithService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ArithService_Stub::~ArithService_Stub() {
  if (owns_channel_) delete channel_;
}

void ArithService_Stub::compute(::google::protobuf::RpcController* controller,
                              const ::rpc::arith::ArithRequest* request,
                              ::rpc::arith::ArithResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace arith
}  // namespace rpc

// @@protoc_insertion_point(global_scope)
